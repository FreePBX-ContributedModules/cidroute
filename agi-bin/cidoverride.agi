#!/usr/bin/php -q
<?php
//Copyright (C) Rob Thomas <xrobau@gmail.com> -
//    Why Pay More 4 Less Pty Ltd (Australia) 2008
//
//       THIS IS NOT OPEN SOURCE SOFTWARE.
//
//  Whilst the source is available for you to look at, you
//  do NOT have a licence to change or re-distribute this
//  software.

//  This specific document, all other associated files, any
//  databases, and the database designs that accompany it
//  are Copyright 2008, and  are licenced for the SOLE USE of
//  Astrogen LLC, otherwise known as FreePBX, to be
//  distributed SOLEY with the FreePBX software package.

//  If you wish to licence the redistribution of these
//  copyrighted documents, database, and database designs,
//  the ONLY company that is able to do so is:

//    Why Pay More 4 Less Pty Ltd,
//    1 Grayson st,
//    Gladstone, QLD, 4680, AUSTRALIA
//
//   PHYSICAL MAIL only (Electronic mail is not acceptable)

//   If you do not have written permission from this company to
//   redistribute this copyrighted package and do so, you are
//   violating international copyright laws, and will be
//   prosecuted to the FULL EXTENT of the law.

//   You may be asking why this licence is so strict?  At the time
//   this was written, the Author believed that Fonality was
//   involved in numerous GPL Violations with their Trixbox
//   product.  If and when that is ever resolved, this document
//   will be re-licenced under v2 of the GPL.


/* 
  Overview of the CIDoverride AGI
    * Grab the ID of this call.
    * Get the previous calls CallerID (DB->Exten/CallTrace)
    * Check to make sure it's not an internal call 
    * Say "The previous call from (number) was not found/was found in (tts->localarea)
    * Say "This call would be sent to (tts->cidroute_matches.name)/would be ignored"
    * Say "To update this, press 1."
    * If 1, then:
    *  If found in an existing group, 
    *   prompt to send all numbers in that group to the destination selected
    *   If yes, say number range
    *  Say "Please select the destination from the following"
    *   If count(cidroute_dests.name) > 8
    *    Say 'More than 10 destinations. Press * and # to forward and back 10'
    *   Say 'You may key the number at any time'
    *   Read out all the names
    *   Loop if needed for more than 10
    *   Read number
    *   Now we have a dest.
    *   If they're picking a range, update cid_matches
    *   If they're picking a number, update cid_override
    *  Say Update Complete, Thank you, goodbye

*/

require_once "phpagi.php";
require_once "phpagi-asmanager.php";

global $amp_conf;
$quietmode = 1;


// Startup - Ensure that we have a CallerID number.

$AGI = new AGI();
$mynum = $AGI->request['agi_callerid'];
debug("Starting CIDoverride.agi", 1);

debug("Searching for previous call to Exten '$cidnum' in lookup tables",2);
$cidnum = $AGI->database_get("CALLTRACE", $mynum);
$cidnum['data'] = 295461936;

debug("Previous call was from '".$cidnum['data']."'",3);

// Parse amportal and connect to the database
parse_amportal_conf("/etc/amportal.conf");
require_once($amp_conf['AMPWEBROOT']."/admin/common/db_connect.php");

// Just incase something insane goes wrong wtih any of the sql queres, we grab the die_freepbx 
// function and redirect it to agi->debug.. This SHOULDN'T exist here, unless for some insane 
// reason that function has been moved into db_connect.php.  I really don't expect it to be, 
// but hey. Better safe than sorry.

if (!function_exists("die_freepbx")) {
	function die_freepbx($var) {
		debug($var,0);
	}
}
$res = sql("select count(*) from users,devices where users.extension=".$cidnum['data']." or devices.id=".$cidnum['data'], "getRow");
if ($res[0] != 0) {
	// It's an existing extension. Can't do it.
	say("I'm sorry, the previous call was from an internal number. I don't have a record of the caller I D you wish to alter.");
	exit;
}

// Check to see if the CID is in a range we already know about.
$q = "select state,region,localarea from cidroute_cidlist where '{$cidnum['data']}' >= min_numb and '{$cidnum['data']}' <= max_numb";
$res = sql($q, "getRow",DB_FETCHMODE_ASSOC);
if (is_array($res) && isset($res['state'])) {
	debug("Found State:".$res['state'].", Region:".$res['region']." LocalArea:".$res['localarea'], 3);
	$saystr = "<prosody rate='medium'> This number is in the state of ";
	$tmp = str_split($res['state']);
	foreach ($tmp as $char) { $saystr .= $char." "; }
	$saystr .= ", and the region of ".$res['region'].",, with the local area called ";
	$saystr .= $res['localarea']."</prosody>";
	say($saystr);
	$res = check("If you would like me to repeat that, press one. If you would like me to spell that, press 2. To continue, press hash");
}


exit;






$q = "select distinct(localarea) from cidroute_cidlist order by RAND() limit 10";
$res = sql($q, "getAll");
$str = "Begin. ";
foreach ($res as $r) {
	$str .= ", ".$r[0];
	}
$AGI->exec("swift", '"'.$str.'"');
exit;
	

// All the useful tools here..
function parse_amportal_conf($filename="/etc/amportal.conf") {
	global $amp_conf;

	$file = file($filename);
	if (is_array($file)) {
		foreach ($file as $line) {
			if (preg_match("/^\s*([a-zA-Z0-9_]+)=([a-zA-Z0-9 .&-@=_<>\"\']+)\s*$/",$line,$matches)) {
				$amp_conf[ $matches[1] ] = $matches[2];
			}
		}
	} 
}

function get_var( $agi, $value) {
        $r = $agi->get_variable( $value );

        if ($r['result'] == 1) {
                $result = $r['data'];
                return $result;
        }
        return '';
}

function debug($string, $level=3) {
        global $AGI;
        $AGI->verbose($string, $level);
}

function sql($sql,$type="query",$fetchmode=null) {
        global $db;
        $results = $db->$type($sql,$fetchmode);
        if(DB::IsError($results)) {
                die_freepbx($results->getDebugInfo() . "SQL - <br> $sql" );
        }
        return $results;
}

function dial($res,$name) {
	global $AGI;
	$AGI->set_variable("CALLERID(name)", $name);
	$arr=explode(",", $res);
	$AGI->exec_dial($arr[0], $arr[1], $arr[2]);
}

function say($str) {
	global $AGI;
	$AGI->exec("swift", '"'.$str.'"');
}

function check($str) {
	global $AGI;
	say("If you would like me to repeat that, press one. If you would like me to spell that, press 2. To continue, press hash");
	$res=$AGI->wait_for_digit(5000);
}
	
	
?>
