#!/usr/bin/php -q
<?php
//Copyright (C) Rob Thomas <xrobau@gmail.com> -
//    Why Pay More 4 Less Pty Ltd (Australia) 2008
//
//       THIS IS NOT OPEN SOURCE SOFTWARE.
//
//  Whilst the source is available for you to look at, you
//  do NOT have a licence to change or re-distribute this
//  software.

//  This specific document, all other associated files, any
//  databases, and the database designs that accompany it
//  are Copyright 2008, and  are licenced for the SOLE USE of
//  Astrogen LLC, otherwise known as FreePBX, to be
//  distributed SOLEY with the FreePBX software package.

//  If you wish to licence the redistribution of these
//  copyrighted documents, database, and database designs,
//  the ONLY company that is able to do so is:

//    Why Pay More 4 Less Pty Ltd,
//    1 Grayson st,
//    Gladstone, QLD, 4680, AUSTRALIA
//
//   PHYSICAL MAIL only (Electronic mail is not acceptable)

//   If you do not have written permission from this company to
//   redistribute this copyrighted package and do so, you are
//   violating international copyright laws, and will be
//   prosecuted to the FULL EXTENT of the law.

//   You may be asking why this licence is so strict?  At the time
//   this was written, the Author believed that Fonality was
//   involved in numerous GPL Violations with their Trixbox
//   product.  If and when that is ever resolved, this document
//   will be re-licenced under v2 of the GPL.


/* 
  Overview of the CIDoverride AGI
    * Grab the ID of this call. 
    * Get the previous calls CallerID (DB->Exten/CallTrace)
    * Check to make sure it's not an internal call
    * Say "The previous call from (number) was not found/was found in (tts->localarea)
    * Say "This call would be sent to (tts->cidroute_matches.name)/would be ignored"
    * Say "To update this, press 1." (Changed this.. I'll get user feedback on what they prefer)
    * If 1, then:
    *  If found in an existing group,  
    *   prompt to send all numbers in that group to the destination selected
    *   If yes, say number range
    *  Say "Please select the destination from the following"
    *   If count(cidroute_dests.name) > 8
    *    Say 'More than 10 destinations. Press * and # to forward and back 10'
    *   Say 'You may key the number at any time'
    *   Read out all the names
    *   Loop if needed for more than 10
    *   Read number
    *   Now we have a dest.
    *   If they're picking a range, update cid_matches
    *   If they're picking a number, update cid_override
    *  Say Update Complete, Thank you, goodbye

    * All complete!
	

*/

require_once "phpagi.php";
require_once "phpagi-asmanager.php";

global $amp_conf;
$quietmode = 1;


// Startup - Ensure that we have a CallerID number.

$AGI = new AGI();
$mynum = $AGI->request['agi_callerid'];
debug("Starting CIDoverride.agi", 1);

debug("Searching for previous call to Exten '$cidnum' in lookup tables",2);
$cidnum = $AGI->database_get("CALLTRACE", $mynum);

debug("Previous call was from '".$cidnum['data']."'",3);

// Parse amportal and connect to the database
parse_amportal_conf("/etc/amportal.conf");
require_once($amp_conf['AMPWEBROOT']."/admin/common/db_connect.php");

// Just incase something insane goes wrong wtih any of the sql queries, we grab the die_freepbx 
// function and redirect it to agi->debug.. This SHOULDN'T exist before here, unless for some 
// insane reason that function has been moved into db_connect.php.  I really don't expect it to be, 
// but hey. Better safe than sorry.

if (!function_exists("die_freepbx")) {
	function die_freepbx($var) {
		debug($var,0);
	}
}

// Begin!
$res = sql("select count(*) from users,devices where users.extension=".$cidnum['data']." or devices.id=".$cidnum['data'], "getRow");
if ($res[0] != 0) {
	// It's an existing extension. Can't do it.
	say("I'm sorry, the previous call was from an internal number. I don't have a record of the caller I D you wish to alter.");
	exit;
}

// Check to see if the CID is in a range we already know about.
$q = "select state,region,localarea from cidroute_cidlist where '{$cidnum['data']}' >= min_numb and '{$cidnum['data']}' <= max_numb";
$res = sql($q, "getRow",DB_FETCHMODE_ASSOC);
// If it is..
if (is_array($res) && isset($res['state'])) {
	debug("Found State:".$res['state'].", Region:".$res['region']." LocalArea:".$res['localarea'], 3);
	$saystr = "This number is in the state of: ";
	$tmp = str_split($res['state']);
	foreach ($tmp as $char) { $saystr .= strtolower($char." "); }
	$saystr .= ". The region is: ".$res['region'].".  The local area is called: ".$res['localarea'];
	$saystr .= ": If you would like me to repeat that, press star. If you would like me to spell that, press 1. ";
	$saystr .= "To continue, press hash. Press any other key to hang up.";
	$check = say_and_get($saystr);
	if ($check == "1") {
		say_regions($res['state'], $res['region'], $res['localarea']);
		$check = "#";
	}
	if ($check != "#") {
		exit;
	}
	// select_destination() returns:
	//     Array(name => 'text name', id => cidroute_matches.destid)
	$dest = select_destination();
	$check = say_and_get("If you would like to alter just this number, press 1. If you would like to alter the entire range, press 2");
	if ($check == "1") {
		add_override($dest,$cidnum['data']);
	} elseif ($check == "2") {
		modify_range($dest,$cidnum['data']);
	}
} else {
	// A CallerID number NOT in the database. This means there's stuff missing from there. 
	say("The Caller ID number selected is not in the database. You can only add an override. Contact Support");
	add_override($dest,$cidnum['data']);
}

say ("Goodbye");
exit;


// Various Functions below here..

// Add an override for one specific number.. 
// $dest = Arryay('id' => db.destid, 'name' => descriptive name of the match)
// $cid = caller id of call you want to change
function add_override($dest,$cid) {
	global $AGI;

	say("To confirm that you want to send only the caller ID number");
	$AGI->say_digits($cid);
	$saystr =  "to ".$dest['name'].", you must push 5. Any other button will abort. Changes will happen immediately";
	$res = say_and_get($saystr);
	if ($res == "5") {
		sql("delete from cidroute_override where number='".$cid."'", "query");
		sql("insert into cidroute_override (name, number, dest) values ('Via Phone', $cid, ".$dest['id'].")", "query");
	}
	say("Update complete. Goodbye.");
}

// Add an override for a range of numbers
// $dest = Arryay('id' => db.destid, 'name' => descriptive name of the match)
// $cid = caller id of call you want to change
function modify_range($dest,$cid) {
	global $db;
	global $AGI;
	// We already check to make sure that this is part of a range, so we just need to grab the range
	$q = "select localarea,min_numb,max_numb from cidroute_cidlist where '$cid' >= min_numb and '$cid' <= max_numb";
	$res = sql($q, "getRow",DB_FETCHMODE_ASSOC);
	if (!isset($res['min_numb'])) {
		// The database said one thing 50msec ago, and something else now. Panic.
		say("Severe Error Occured. Attemped to add a range that does not exist. Goodbye.");
		exit;
	}
	$min_numb = $res['min_numb'];
	$max_numb = $res['max_numb'];
	$localarea = $res['localarea'];

	// Check to make sure it's not already assigned to some place else.
	$q = "select min_numb,dest from cidroute_matches where min_numb='$min_numb'";
	$check = sql($q, "getRow", DB_FETCHMODE_ASSOC);

	if (isset($check['min_numb'])) {
		// It _IS_ assigned to someone else.
		$prevdest = sql("select name,destid from cidroute_dests where destid='".$check['dest']."'", "getRow");
		$confirm = say_and_get("This range is already assigned to: ".$prevdest[0].": If you are sure you wish to alter this, press 2 now");
		if ($confirm != "2") {
			say("Change Aborted. Goodbye.");
			exit;
		}
	}
	say("To confirm that you want to send the caller ID range from");
	$AGI->say_digits($min_numb);
	say("to");
	$AGI->say_digits($max_numb);
	$saystr = "which is part of the area: ".$localarea.", to: ".$dest['name'].": you must push 5. Any other button will abort. ";
	$saystr .= "Changes will happen immediately.";
	$res = say($saystr);
	if ($res == "5") {
		sql("delete from cidroute_matches where min_numb='$min_numb' and max_numb='$max_numb'", "query");
		$q = "insert into cidroute_matches (name, country, areacode, min_numb, max_numb, dest) values ";
		$q .=   "('Via Phone', 'au', 99, '$min_numb', '$max_numb', '".$dest['id']."')";
		sql($q, "query");
		say("Update complete. Goodbye.");
		exit;
	} else {
		say("Change Aborted. Goodbye.");
		exit;
	}
}


function select_destination() {
	global $db;
	global $AGI;

	// 8 or less destinations..
	$multiple = false;

	// Get the list of destinations from cidroute_dests
	$data = sql("select destid, name from cidroute_dests", "getAll");
	if (!isset($data[0])) {
		say("Sorry, there doesn't seem to be any desinations created. Please add these via the web page.");
		exit;
	}
	if (count($data)>8) {
		$multiple = true;
	}

	$saystr="Please select the destination for this number. ".count($data);
	if (!$multiple) {
		while (1) {
			for ($i=0; $i < count($data); $i++) {
				$saystr .= "Press $i for  ".$data[$i][1].". ";
			}
			$res = say_and_get($saystr);
			if (!isset($data[$res+$pointer])) {
				say ("Invalid Selection");
				continue;
			}
			break;
		}
	} else {
	   //Multiple. Need to care about pointers!
		// Start at zero.
		$pointer = 0;
		// Yes, PHP's lack of gotos DOES INDEED suck.
		$loop = true;
		say("Please select the destination.");
		while ($loop == true) {
			$saystr="";
			for ($i=0; isset($data[$i+$pointer]) && $i <= 7; $i++) {
				$saystr .= "Press $i for ".$data[$pointer+$i][1].". ";
			}
			if (isset($data[$pointer+8])) {
				$saystr .= "Press 9 to move forwards. ";
			} 
			if (isset($data[$pointer-8])) {
				$saystr .= "Press 8 to move backwards. ";
			}
			$res=say_and_get($saystr);
			if ($res === null || !is_numeric($res)) {
				continue;
			}
			// 8 and 9 are forward-and-backwards..
			if ($res == "8" || $res == "9") {
				if ($res == "8" && isset($data[$pointer-8])) {
					$pointer = $pointer - 8;
					continue;
				} elseif ($res == "9" && isset($data[$pointer+8])) {
					$pointer = $pointer + 8;
					continue;
				} else {
					say ("Invalid Selection");
				}
			} elseif (isset($data[$res+$pointer])) {
				break;
			} else {
				say ("Invalid Selection");
			}
		}
	}
	return(Array('name' => $data[$res+$pointer][1], 'id' => $res+$pointer));
}

function say_regions($state, $region, $area) {
	global $AGI;
	$repeat = true;
	while ($repeat == true) {
		$repeat = false;
		say("The state is...");
		$AGI->say_phonetic($state, "#");
		say("The region is...");
		$AGI->say_phonetic($region, "#");
		say("The area is...");
		$AGI->say_phonetic($area, "#");
		$check = say_and_get("Press 1 to repeat, or hash to continue");
		if ($check != "#") {
			$repeat = true;
		}
	}
}


function say_and_get($str) {
	global $AGI;
	$repeat = true;
	while (1) {
		$res = say($str);
		if ($res === null) {
			$readkey=$AGI->wait_for_digit(5000);
			if ($readkey['result'] != 0) {
				$val = chr($readkey['result']);
				break;
			}
		} else {
			$val = $res;
			break;
		}
	}
	return $val;
}

// 'say' takes a string and says it! If you push '*' it will repeat. If you push anything else,
// it will return what you push. If you don't push anything, it will return null.
function say($str) {
	global $AGI;

	// I hate PHP. This could be done with a GOTO, but oh no, they don't WANT to implement
	// a goto, because there was once a document written about GOTO's and how MOST OF THE TIME
	// they make code unreadable. MOST OF THE TIME. You bastards. You think THIS is readable?
	// Geez. This loops if a * has been pushed, basically. 
	$repeat = true;
	while ($repeat == true) {
		$repeat = false;
		// For some reason, phpagi is sending back the character I pushed.  Putting a Noop here
		// fixes it, but there is a bug somewhere.  FIXME
		// AGI Rx << WAIT FOR DIGIT 5000
		// AGI Tx >> 200 result=35
		// AGI Rx << #NOOP    <-- Here, there is # before NOOP.
		// AGI Tx >> 510 Invalid or unknown command

		$AGI->noop("Null");
		$AGI->set_variable("SWIFT_DTMF", "unset");
		$AGI->exec("swift", '"'.$str.'"');
		$ret = $AGI->get_variable("SWIFT_DTMF");
		if (isset($ret['data']) && $ret['data'] != "unset" && $ret['data'] !== "" ) {
			if ($ret['data'] == "*")  {
				$repeat = true;
			} else {
				return $ret['data'];
			}
		}
	}
	return null;
}


// All the useful tools here..
function parse_amportal_conf($filename="/etc/amportal.conf") {
	global $amp_conf;

	$file = file($filename);
	if (is_array($file)) {
		foreach ($file as $line) {
			if (preg_match("/^\s*([a-zA-Z0-9_]+)=([a-zA-Z0-9 .&-@=_<>\"\']+)\s*$/",$line,$matches)) {
				$amp_conf[ $matches[1] ] = $matches[2];
			}
		}
	} 
}

function get_var( $agi, $value) {
        $r = $agi->get_variable( $value );

        if ($r['result'] == 1) {
                $result = $r['data'];
                return $result;
        }
        return '';
}

function debug($string, $level=3) {
        global $AGI;
        $AGI->verbose($string, $level);
}

function sql($sql,$type="query",$fetchmode=null) {
        global $db;
	
	debug("CIDoverride db: $sql", 4);
        $results = $db->$type($sql,$fetchmode);
        if(DB::IsError($results)) {
                die_freepbx($results->getDebugInfo() . "SQL - <br> $sql" );
        }
        return $results;
}

function dial($res,$name) {
	global $AGI;
	$AGI->set_variable("CALLERID(name)", $name);
	$arr=explode(",", $res);
	$AGI->exec_dial($arr[0], $arr[1], $arr[2]);
}

?>
